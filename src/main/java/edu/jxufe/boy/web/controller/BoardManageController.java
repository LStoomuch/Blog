/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package edu.jxufe.boy.web.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import edu.jxufe.boy.cons.CommonConstant;
import edu.jxufe.boy.dao.Page;
import edu.jxufe.boy.entity.Board;
import edu.jxufe.boy.entity.Post;
import edu.jxufe.boy.entity.Topic;
import edu.jxufe.boy.entity.User;
import edu.jxufe.boy.service.ForumService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;


/**
 * 
 * <br>
 * <b>类描述:</b>
 * 
 * <pre>
 *   这个Action负责处理论坛普通操作功能的请求，包括：显示论坛版块列表、显示论坛版块主题列表、
 * 表主题帖、回复帖子、删除帖子、设置精华帖子等操作。
 * </pre>
 * 
 * @see
 * @since
 */
@Controller
@RequestMapping("BoardManage")
public class BoardManageController extends BaseController {
	@Autowired
	private ForumService forumService;

	/**
	 * 列出论坛所有模块
	 *
	 * @return
	 */
	@RequestMapping("AllBoards")
	public ModelAndView showAllBoard(){
		List<Board> boards = forumService.getAllBoards();
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.addObject("boards",boards);
		modelAndView.setViewName("Board/BoardContainer");
		return modelAndView;
	}
	@RequestMapping(value = "/board/loadBoardTopicsPage-{boardId}", method = RequestMethod.GET)
	public ModelAndView loadBoardTopicsPage(@PathVariable Integer boardId){
		ModelAndView modelAndView = new ModelAndView();
		Board board = forumService.getBoardById(boardId);
		modelAndView.addObject("board",board);
		modelAndView.setViewName("BoardTopic/BoardTopic");
		return modelAndView;
	}
	/**
	 * 列出论坛模块下的主题帖子
	 * 
	 * @param boardId
	 * @param pageNo
	 * @return
	 */
	@RequestMapping(value = "/board/listBoardTopics-{boardId}", method = RequestMethod.GET)
	public ModelAndView listBoardTopics(@PathVariable Integer boardId,@RequestParam(value = "pageNo", required = false) Integer pageNo) {
		ModelAndView view =new ModelAndView();
		Board board = forumService.getBoardById(boardId);
		pageNo = pageNo==null?1:pageNo;
		Page<Topic> pagedTopic = forumService.getPagedTopics(boardId, pageNo,
				CommonConstant.PAGE_SIZE);
		view.addObject("board", board);
		view.addObject("pagedTopic", pagedTopic);
		view.setViewName("/BoardTopic/TopicContainer");
		return view;
	}


	/**
	 * 添加一个主题帖
	 * 
	 * @param request
	 * @param topic
	 * @return
	 */
	@RequestMapping(value = "/board/topic", method = RequestMethod.POST)
	public String addTopic(HttpServletRequest request,Topic topic) {
		User user = getSessionUser(request);
		topic.setUser(user);
		Date now = new Date();
		topic.setCreateTime(now);
		topic.setLastPost(now);
		forumService.addTopic(topic);
		String targetUrl = "/board/listBoardTopics-" + topic.getBoardId()
				+ ".html";
		return "redirect:"+targetUrl;
	}

	/**
	 * 加载帖子内容页面
	 * @param topicId
	 * @return
	 */
	@RequestMapping(value = "/board/loadTopicPostPage-{topicId}", method = RequestMethod.GET)
	public ModelAndView loadTopicPostPage(@PathVariable Integer topicId){
		ModelAndView modelAndView = new ModelAndView();
		Topic topic = forumService.getTopicByTopicId(topicId);
		modelAndView.setViewName("TopicPost/TopicPost");
		modelAndView.addObject("topic",topic);
		return modelAndView;
	}

	/**
	 * 列出楼主的主题和所有的回复
	 * 
	 * @param topicId
	 * @param pageNo
	 * @return
	 */
	@RequestMapping(value = "/board/listTopicPosts-{topicId}", method = RequestMethod.GET)
	public ModelAndView listTopicPosts(@PathVariable Integer topicId,@RequestParam(value = "pageNo", required = false) Integer pageNo) {
		ModelAndView view =new ModelAndView();
		Topic topic = forumService.getTopicByTopicId(topicId);
		pageNo = pageNo==null?1:pageNo;
		Page<Post> pagedPost = forumService.getPagedPosts(topicId, pageNo,
				CommonConstant.PAGE_SIZE);
		// 为回复帖子表单准备数据
		view.addObject("topic", topic);
		view.addObject("pagedPost", pagedPost);
		view.setViewName("/TopicPost/PostContainer");
		return view;
	}

	/**
	 * 回复主题
	 * 
	 * @param request
	 * @param post
	 * @return
	 */
	@RequestMapping(value = "/board/Post",method = RequestMethod.POST)
	@ResponseBody
	public Map addPost(HttpServletRequest request, Post post) {
		Map map = new HashMap();
		if (post.getPostText()==null||post.getPostText()==""){
			map.put("msg","回复内容不能为空");
			return map;
		}
		if (post.getPostText().length()>300){
			map.put("msg","回复内容不能超过300字");
			return map;
		}
		post.setCreateTime(new Date());
		post.setUser(getSessionUser(request));
		forumService.addPost(post);
		return map;
	}

	/**
	 * 删除版块
	 * 
	 * @param boardIds
	 */
	@RequestMapping(value = "/board/removeBoard", method = RequestMethod.GET)
	public String removeBoard(@RequestParam("boardIds") String boardIds) {
		String[] arrIds = boardIds.split(",");
		for (int i = 0; i < arrIds.length; i++) {
			forumService.removeBoard(new Integer(arrIds[i]));
		}
		String targetUrl = "/index.html";
		return "redirect:"+targetUrl;
	}

	/**
	 * 删除主题
	 * 
	 * @param topicIds
	 * @param boardId
	 */
	@RequestMapping(value = "/board/removeTopic", method = RequestMethod.GET)
	public String removeTopic(@RequestParam("topicIds") String topicIds,@RequestParam("boardId") String boardId) {
		String[] arrIds = topicIds.split(",");
		for (int i = 0; i < arrIds.length; i++) {
			forumService.removeTopic(new Integer(arrIds[i]));
		}
		String targetUrl = "/board/listBoardTopics-" + boardId + ".html";
		return "redirect:"+targetUrl;
	}

	/**
	 * 设置精华帖
	 * @param topicIds
	 * @param boardId
	 */
	@RequestMapping(value = "/board/makeDigestTopic", method = RequestMethod.GET)
	public String makeDigestTopic(@RequestParam("topicIds") String topicIds,@RequestParam("boardId") String boardId) {
		String[] arrIds = topicIds.split(",");
		for (int i = 0; i < arrIds.length; i++) {
			forumService.makeDigestTopic(new Integer(arrIds[i]));
		}
		String targetUrl = "/board/listBoardTopics-" + boardId + ".html";
		return "redirect:"+targetUrl;
	}
}
